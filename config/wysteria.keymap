#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include "wrappers.h"
#include <dt-bindings/zmk/mouse.h>

#include "secrets.keymap"

#define COMBO(NAME, BINDINGS, KEYPOS) \
      combo_##NAME { \
          timeout-ms = <20>; \
          bindings = <BINDINGS>; \
          key-positions = <KEYPOS>; \
          layers = <0>; \
        };

#define U_MOUSE_SCROLL_MAX 200      // 10

#undef SCROLL_UP
#undef SCROLL_DOWN
#undef SCROLL_LEFT
#undef SCROLL_RIGHT
#define SCROLL_UP SCROLL_VERT(U_MOUSE_SCROLL_MAX)
#define SCROLL_DOWN SCROLL_VERT(-U_MOUSE_SCROLL_MAX)
#define SCROLL_LEFT SCROLL_HOR(-U_MOUSE_SCROLL_MAX)
#define SCROLL_RIGHT SCROLL_HOR(U_MOUSE_SCROLL_MAX)

/* #define MACRO(NAME, BINDINGS) \ */
/*     macro_##NAME: macro_##NAME { \ */
/*                          compatible = "zmk,behavior-macro"; \ */
/*                          label = "ZM_my_macro"; \ */
/*                          #binding-cells = <0>; \ */
/*                          wait-ms = <30>; \ */
/*                          tap-ms = <40>; \ */
/*                          bindings = <BINDINGS>; \ */
/*                      }; */

&sk {
    quick-release;
};


/ {
    behaviors {
      skq: sticky_key_quick_release {
        compatible = "zmk,behavior-sticky-key";
        label = "STICKY_KEY_QUICK_RELEASE";
        #binding-cells = <1>;
        bindings = <&kp>;
        release-after-ms = <1000>;
        quick-release;
        ignore-modifiers;
      };
      wd_bspc_del: word_backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKSPACE_DELETE";
            #binding-cells = <0>;
            bindings = <&kp LA(BACKSPACE)>, <&kp LA(DELETE)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
      bspc_del: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKSPACE_DELETE";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp DELETE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
      dot: dot_colon {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_COLON";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp COLON>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_LSFT|MOD_RSFT)>;
        };
      comma: comma_scolon {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_SCOLON";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp SEMICOLON>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
      swap: swap_win {
            compatible = "zmk,behavior-tri-state";
            label = "SWAPPER";
            #binding-cells = <0>;
            bindings = <&kt LGUI>, <&kp TAB>, <&kt LGUI>;
            ignored-key-positions = <14>; // 14 corresponds to QWERTY F, which is my left shift
        };
      swap_app: swap_app_win {
            compatible = "zmk,behavior-tri-state";
            label = "SWAP_APP";
            #binding-cells = <0>;
            bindings = <&kt LGUI>, <&kp GRAVE>, <&kt LGUI>;
            ignored-key-positions = <14>; // 14 corresponds to QWERTY F, which is my left shift
        };
      rot_kp: behavior_sensor_rotate_kp {
            compatible = "zmk,behavior-sensor-rotate-var";
            label = "ENC_KP";
            #sensor-binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };
      rot_mwh: behavior_sensor_rotate_mwh {
            compatible = "zmk,behavior-sensor-rotate-var";
            label = "ENC_MOUSE";
            #sensor-binding-cells = <2>;
            bindings = <&mwh>, <&mwh>;
        };

    };

    combos {
          compatible = "zmk,combos";

            COMBO(x, &kp X, 30 31)
            COMBO(z, &kp Z, 24 25)
            COMBO(q, &kp Q, 2 3)
            COMBO(caps_word, &caps_word, 13 18)
            COMBO(lshift, &sk LSHFT, 13 14)
            COMBO(rshift, &sk RSHFT, 17 18)
    };

    macros {
        ZMK_MACRO(nrc,
                wait-ms = <20>;
                tap-ms = <20>;
                bindings
                    = <&macro_press    &kp LSHFT>
                    , <&macro_tap      &kp N &kp R &kp C>
                    , <&macro_release  &kp LSHFT>;
                )
        ZMK_MACRO(mne,
                wait-ms = <20>;
                tap-ms = <20>;
                bindings
                    = <&macro_press    &kp LSHFT>
                    , <&macro_tap      &kp M &kp AMPS &kp E>
                    , <&macro_release  &kp LSHFT>;
                )
        ZMK_MACRO(pass,
                wait-ms = <5>;
                tap-ms = <5>;
                bindings
                    = <&macro_tap      SECRET_ONE>;
                )
        ZMK_MACRO(email,
                wait-ms = <5>;
                tap-ms = <5>;
                bindings
                    = <&macro_tap      SECRET_TWO>;
                )
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
                          __APTMAK_L1__           __APTMAK_R1__
                    &none __APTMAK_L2__           __APTMAK_R2__ &none
                          __APTMAK_L3__ MUTE MUTE __APTMAK_R3__
                                       __THUMBS__
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP &rot_mwh SCROLL_UP SCROLL_DOWN>;
        };

        nav_layer {
            bindings = <
                          __NAV____L1__           __NAV____R1__
                    &none __NAV____L2__           __NAV____R2__ &none
                          __NAV____L3__ MUTE MUTE __NAV____R3__
                                       __THUMBS__
            >;

            sensor-bindings = <&rot_mwh SCROLL_LEFT SCROLL_RIGHT &inc_dec_kp A B>;
        };

        num_layer {
            bindings = <
                          __NUM____L1__           __NUM____R1__
                    &none __NUM____L2__           __NUM____R2__ &none
                          __NUM____L3__ MUTE MUTE __NUM____R3__
                                       __THUMBS__
            >;

            sensor-bindings = <&rot_mwh SCROLL_LEFT SCROLL_RIGHT &inc_dec_kp PG_DN PG_UP>;
        };

        sym_layer {
            bindings = <
                          __SYM____L1__           __SYM____R1__
                    &none __SYM____L2__           __SYM____R2__ &none
                          __SYM____L3__ MUTE MUTE __SYM____R3__
                                       __THUMBS__
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP &inc_dec_kp PG_DN PG_UP>;
        };

        wmm_layer {
            bindings = <
                          __WMM____L1__           __WMM____R1__
                    &none __WMM____L2__           __WMM____R2__ &none
                          __WMM____L3__ MUTE MUTE __WMM____R3__
                                       __THUMBS__
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP &inc_dec_kp PG_DN PG_UP>;
        };
    };
};
